openapi: 3.0.3
info:
  title: "CityPulse API"
  description: "The official REST API for the CityPulse platform, providing services for urban issue reporting, data management, and user engagement."
  version: "1.0.0"
  contact:
    name: "CityPulse Development Team"
    email: "dev@citypulse.example.com"
servers:
  - url: "https://api.citypulse.example.com/v1"
    description: "Production Server"
  - url: "https://staging-api.citypulse.example.com/v1"
    description: "Staging Server"

paths:
  /users:
    get:
      summary: "List all users"
      description: "Retrieves a list of all user profiles. Requires admin privileges."
      tags:
        - User Management
      security:
        - bearerAuth: [admin]
      responses:
        '200':
          description: "A list of user profiles."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfile'
        '401':
          description: "Unauthorized"
        '403':
          description: "Forbidden"

  /users/{userId}:
    get:
      summary: "Get user by ID"
      description: "Retrieves a single user profile by their unique ID."
      tags:
        - User Management
      security:
        - bearerAuth: [user, admin]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: "The unique ID of the user."
      responses:
        '200':
          description: "The requested user profile."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: "User not found"

  /events:
    get:
      summary: "List all events"
      description: "Retrieves a list of all events, with optional filtering."
      tags:
        - Event Management
      parameters:
        - name: category
          in: query
          schema:
            $ref: '#/components/schemas/EventCategory'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/EventStatus'
      responses:
        '200':
          description: "A list of events."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: "Submit a new event"
      description: "Creates a new event, typically a citizen report."
      tags:
        - Event Management
      security:
        - bearerAuth: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: "Event created successfully."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: "Invalid input"

  /events/{eventId}:
    get:
      summary: "Get event by ID"
      description: "Retrieves a single event by its unique ID."
      tags:
        - Event Management
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: "The unique ID of the event."
      responses:
        '200':
          description: "The requested event."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: "Event not found"

  /feedback:
    post:
      summary: "Submit feedback"
      description: "Submits user feedback, such as a bug report or feature request."
      tags:
        - Feedback
      security:
        - bearerAuth: [user]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
      responses:
        '201':
          description: "Feedback submitted successfully."
        '400':
          description: "Invalid input"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user_id:
          type: string
          description: "Firebase Authentication UID."
        email:
          type: string
          format: email
        display_name:
          type: string
        photo_url:
          type: string
          format: uri
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        is_active:
          type: boolean
          default: true
        last_login:
          type: string
          format: date-time
      required:
        - user_id
        - email

    UserRole:
      type: string
      enum: [user, moderator, admin]

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
        description:
          type: string
        location:
          type: object
          properties:
            latitude:
              type: number
              format: double
            longitude:
              type: number
              format: double
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/EventCategory'
        severity:
          $ref: '#/components/schemas/EventSeverity'
        source:
          $ref: '#/components/schemas/EventSource'
        status:
          $ref: '#/components/schemas/EventStatus'
        user_id:
          type: string
          description: "ID of the user who submitted the event."
        ai_summary:
          type: string
          readOnly: true
      required:
        - title
        - location
        - start_time
        - category
        - source

    EventCategory:
      type: string
      enum: [traffic, weather, public_safety, infrastructure, community, other]

    EventSeverity:
      type: string
      enum: [low, medium, high, critical]

    EventStatus:
      type: string
      enum: [active, resolved, false_positive]

    EventSource:
      type: string
      enum: [user_report, sensor, social_media, city_official]

    Feedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user_id:
          type: string
        type:
          $ref: '#/components/schemas/FeedbackType'
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/FeedbackStatus'
      required:
        - user_id
        - type
        - description

    FeedbackType:
      type: string
      enum: [bug, feature_request, general, data_issue, ai_correction, other]

    FeedbackStatus:
      type: string
      enum: [open, in_review, resolved, wont_fix, duplicate]