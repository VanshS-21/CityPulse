{"created": 1752404442.5092766, "duration": 0.13415002822875977, "exitcode": 1, "root": "/mnt/persist/workspace/e2e-tests", "environment": {}, "summary": {"passed": 6, "failed": 4, "total": 10, "collected": 20, "deselected": 10}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "features", "type": "Package"}]}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic::test_pipeline_setup", "type": "Coroutine", "lineno": 79, "deselected": true}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic::test_test_resource_creation", "type": "Coroutine", "lineno": 97, "deselected": true}]}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration::test_message_publishing", "type": "Coroutine", "lineno": 124, "deselected": true}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration::test_bulk_message_publishing", "type": "Coroutine", "lineno": 151, "deselected": true}]}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestBigQueryIntegration", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestBigQueryIntegration::test_bigquery_data_validation", "type": "Coroutine", "lineno": 189, "deselected": true}]}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineE2EFlow", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineE2EFlow::test_complete_pipeline_flow", "type": "Coroutine", "lineno": 229, "deselected": true}]}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling::test_invalid_message_handling", "type": "Coroutine", "lineno": 251, "deselected": true}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling::test_resource_cleanup", "type": "Coroutine", "lineno": 274, "deselected": true}]}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke::test_gcp_clients_initialization", "type": "Coroutine", "lineno": 303, "deselected": true}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke::test_configuration_loading", "type": "Coroutine", "lineno": 325, "deselected": true}]}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic", "type": "Class"}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration", "type": "Class"}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestBigQueryIntegration", "type": "Class"}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineE2EFlow", "type": "Class"}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling", "type": "Class"}, {"nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke", "type": "Class"}]}, {"nodeid": "features/data-pipeline", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline/test_pipeline_e2e.py", "type": "Module"}]}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPI", "outcome": "passed", "result": [{"nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_create_event_success", "type": "Coroutine", "lineno": 60}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_create_event_validation_error", "type": "Coroutine", "lineno": 69}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_get_events_pagination", "type": "Coroutine", "lineno": 78}]}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration", "outcome": "passed", "result": [{"nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration::test_complete_event_lifecycle", "type": "Coroutine", "lineno": 91}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration::test_event_authentication_flows", "type": "Coroutine", "lineno": 117}]}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIPerformance", "outcome": "passed", "result": [{"nodeid": "features/events-management/test_events_api.py::TestEventsAPIPerformance::test_api_response_times", "type": "Coroutine", "lineno": 152}]}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling", "outcome": "passed", "result": [{"nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling::test_invalid_event_id", "type": "Coroutine", "lineno": 181}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling::test_malformed_request_data", "type": "Coroutine", "lineno": 202}]}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke", "outcome": "passed", "result": [{"nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke::test_events_endpoint_accessible", "type": "Coroutine", "lineno": 254}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke::test_authentication_works", "type": "Coroutine", "lineno": 271}]}, {"nodeid": "features/events-management/test_events_api.py", "outcome": "passed", "result": [{"nodeid": "features/events-management/test_events_api.py::TestEventsAPI", "type": "Class"}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration", "type": "Class"}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIPerformance", "type": "Class"}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling", "type": "Class"}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke", "type": "Class"}]}, {"nodeid": "features/events-management", "outcome": "passed", "result": [{"nodeid": "features/events-management/test_events_api.py", "type": "Module"}]}, {"nodeid": "features/user-management", "outcome": "passed", "result": []}, {"nodeid": "features", "outcome": "passed", "result": [{"nodeid": "features/data-pipeline", "type": "Dir"}, {"nodeid": "features/events-management", "type": "Package"}, {"nodeid": "features/user-management", "type": "Dir"}]}], "tests": [{"nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_create_event_success", "lineno": 60, "outcome": "passed", "keywords": ["test_create_event_success", "asyncio", "pytestmark", "TestEventsAPI", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.04257539199999627, "outcome": "passed"}, "call": {"duration": 0.0003334310000013829, "outcome": "passed"}, "teardown": {"duration": 0.0003878569999997694, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_create_event_validation_error", "lineno": 69, "outcome": "passed", "keywords": ["test_create_event_validation_error", "asyncio", "pytestmark", "TestEventsAPI", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.000373899999999594, "outcome": "passed"}, "call": {"duration": 0.00029569199999457396, "outcome": "passed"}, "teardown": {"duration": 0.0002370790000014722, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_get_events_pagination", "lineno": 78, "outcome": "passed", "keywords": ["test_get_events_pagination", "asyncio", "pytestmark", "TestEventsAPI", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.00034379799999584293, "outcome": "passed"}, "call": {"duration": 0.0002120949999948607, "outcome": "passed"}, "teardown": {"duration": 0.00026839899999941963, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration::test_complete_event_lifecycle", "lineno": 91, "outcome": "failed", "keywords": ["test_complete_event_lifecycle", "asyncio", "pytestmark", "TestEventsAPIIntegration", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.0002955699999986905, "outcome": "passed"}, "call": {"duration": 0.00035886399999895957, "outcome": "failed", "crash": {"path": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 114, "message": "Failed: Complete event lifecycle test failed: 'APITestBase' object has no attribute 'create_test_event'"}, "traceback": [{"path": "features/events-management/test_events_api.py", "lineno": 114, "message": "Failed"}], "longrepr": "self = <test_events_api.TestEventsAPIIntegration object at 0x7efc79d07310>\n\n    @pytest.mark.asyncio\n    async def test_complete_event_lifecycle(self):\n        \"\"\"Test complete event lifecycle from creation to cleanup.\"\"\"\n        test = APITestBase()\n        await test.setup_client()\n    \n        try:\n            # Authenticate as citizen\n            await test.authenticate_user(\"citizen\")\n    \n            # Create test event\n            event_data = test.test_data[\"events\"][\"validEvent\"]\n>           created_event = await test.create_test_event(event_data)\n                                  ^^^^^^^^^^^^^^^^^^^^^^\nE           AttributeError: 'APITestBase' object has no attribute 'create_test_event'\n\nfeatures/events-management/test_events_api.py:104: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_events_api.TestEventsAPIIntegration object at 0x7efc79d07310>\n\n    @pytest.mark.asyncio\n    async def test_complete_event_lifecycle(self):\n        \"\"\"Test complete event lifecycle from creation to cleanup.\"\"\"\n        test = APITestBase()\n        await test.setup_client()\n    \n        try:\n            # Authenticate as citizen\n            await test.authenticate_user(\"citizen\")\n    \n            # Create test event\n            event_data = test.test_data[\"events\"][\"validEvent\"]\n            created_event = await test.create_test_event(event_data)\n    \n            assert \"id\" in created_event\n            assert created_event[\"title\"] == event_data[\"title\"]\n            assert created_event[\"category\"] == event_data[\"category\"]\n    \n            # Cleanup\n            await test.cleanup_test_event(created_event[\"id\"])\n    \n        except Exception as e:\n>           pytest.fail(f\"Complete event lifecycle test failed: {str(e)}\")\nE           Failed: Complete event lifecycle test failed: 'APITestBase' object has no attribute 'create_test_event'\n\nfeatures/events-management/test_events_api.py:114: Failed"}, "teardown": {"duration": 0.000270235000002117, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration::test_event_authentication_flows", "lineno": 117, "outcome": "passed", "keywords": ["test_event_authentication_flows", "asyncio", "pytestmark", "TestEventsAPIIntegration", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.0004013549999939414, "outcome": "passed"}, "call": {"duration": 0.00027738800000065567, "outcome": "passed"}, "teardown": {"duration": 0.0002608580000043048, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIPerformance::test_api_response_times", "lineno": 152, "outcome": "failed", "keywords": ["test_api_response_times", "asyncio", "pytestmark", "TestEventsAPIPerformance", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.0003207779999954141, "outcome": "passed"}, "call": {"duration": 0.0003564550000021427, "outcome": "failed", "crash": {"path": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 174, "message": "Failed: Performance test failed: 'APITestBase' object has no attribute 'generate_performance_report'"}, "traceback": [{"path": "features/events-management/test_events_api.py", "lineno": 174, "message": "Failed"}], "longrepr": "self = <test_events_api.TestEventsAPIPerformance object at 0x7efc79d106d0>\n\n    @pytest.mark.asyncio\n    async def test_api_response_times(self):\n        \"\"\"Test API response times are within acceptable limits.\"\"\"\n        test = APITestBase()\n        await test.setup_client()\n    \n        try:\n            await test.authenticate_user(\"citizen\")\n    \n            # Test GET /events response time\n            response = await test.make_request(\"GET\", \"/events\")\n    \n            # Check performance metrics\n>           metrics = test.generate_performance_report()\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AttributeError: 'APITestBase' object has no attribute 'generate_performance_report'\n\nfeatures/events-management/test_events_api.py:166: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_events_api.TestEventsAPIPerformance object at 0x7efc79d106d0>\n\n    @pytest.mark.asyncio\n    async def test_api_response_times(self):\n        \"\"\"Test API response times are within acceptable limits.\"\"\"\n        test = APITestBase()\n        await test.setup_client()\n    \n        try:\n            await test.authenticate_user(\"citizen\")\n    \n            # Test GET /events response time\n            response = await test.make_request(\"GET\", \"/events\")\n    \n            # Check performance metrics\n            metrics = test.generate_performance_report()\n    \n            if metrics.get(\"average_response_time\", 0) > 2.0:  # 2 second threshold\n                pytest.fail(f\"API response time too slow: {metrics['average_response_time']}s\")\n    \n            assert response.status_code == 200\n    \n        except Exception as e:\n>           pytest.fail(f\"Performance test failed: {str(e)}\")\nE           Failed: Performance test failed: 'APITestBase' object has no attribute 'generate_performance_report'\n\nfeatures/events-management/test_events_api.py:174: Failed"}, "teardown": {"duration": 0.0002870269999988295, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling::test_invalid_event_id", "lineno": 181, "outcome": "failed", "keywords": ["test_invalid_event_id", "asyncio", "pytestmark", "TestEventsAPIErrorHandling", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.00028818699999533237, "outcome": "passed"}, "call": {"duration": 0.00027181000000098265, "outcome": "failed", "crash": {"path": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 199, "message": "Failed: Error handling test failed: 'APITestBase' object has no attribute 'validate_error_response'"}, "traceback": [{"path": "features/events-management/test_events_api.py", "lineno": 199, "message": "Failed"}], "longrepr": "self = <test_events_api.TestEventsAPIErrorHandling object at 0x7efc79d11190>\n\n    @pytest.mark.asyncio\n    async def test_invalid_event_id(self):\n        \"\"\"Test handling of invalid event IDs.\"\"\"\n        test = APITestBase()\n        await test.setup_client()\n    \n        try:\n            await test.authenticate_user(\"citizen\")\n    \n            # Test with invalid event ID\n            response = await test.make_request(\"GET\", \"/events/invalid-id\")\n            assert response.status_code == 404\n    \n            # Validate error response structure\n>           assert test.validate_error_response(response, 404, [\"error\", \"message\"])\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           AttributeError: 'APITestBase' object has no attribute 'validate_error_response'\n\nfeatures/events-management/test_events_api.py:196: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_events_api.TestEventsAPIErrorHandling object at 0x7efc79d11190>\n\n    @pytest.mark.asyncio\n    async def test_invalid_event_id(self):\n        \"\"\"Test handling of invalid event IDs.\"\"\"\n        test = APITestBase()\n        await test.setup_client()\n    \n        try:\n            await test.authenticate_user(\"citizen\")\n    \n            # Test with invalid event ID\n            response = await test.make_request(\"GET\", \"/events/invalid-id\")\n            assert response.status_code == 404\n    \n            # Validate error response structure\n            assert test.validate_error_response(response, 404, [\"error\", \"message\"])\n    \n        except Exception as e:\n>           pytest.fail(f\"Error handling test failed: {str(e)}\")\nE           Failed: Error handling test failed: 'APITestBase' object has no attribute 'validate_error_response'\n\nfeatures/events-management/test_events_api.py:199: Failed"}, "teardown": {"duration": 0.00039325500000586544, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling::test_malformed_request_data", "lineno": 202, "outcome": "failed", "keywords": ["test_malformed_request_data", "asyncio", "pytestmark", "TestEventsAPIErrorHandling", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.00030616000000094346, "outcome": "passed"}, "call": {"duration": 0.00037077500000037844, "outcome": "failed", "crash": {"path": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 220, "message": "Failed: Malformed data test failed: assert 200 == 400\n +  where 200 = <test_events_api.APITestBase.make_request.<locals>.MockResponse object at 0x7efc79c1c290>.status_code"}, "traceback": [{"path": "features/events-management/test_events_api.py", "lineno": 220, "message": "Failed"}], "longrepr": "self = <test_events_api.TestEventsAPIErrorHandling object at 0x7efc79d05990>\n\n    @pytest.mark.asyncio\n    async def test_malformed_request_data(self):\n        \"\"\"Test handling of malformed request data.\"\"\"\n        test = APITestBase()\n        await test.setup_client()\n    \n        try:\n            await test.authenticate_user(\"citizen\")\n    \n            # Test with malformed JSON\n            malformed_data = {\"title\": \"\", \"invalid_field\": \"test\"}\n            response = await test.make_request(\"POST\", \"/events\", data=malformed_data)\n    \n>           assert response.status_code == 400\nE           assert 200 == 400\nE            +  where 200 = <test_events_api.APITestBase.make_request.<locals>.MockResponse object at 0x7efc79c1c290>.status_code\n\nfeatures/events-management/test_events_api.py:216: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_events_api.TestEventsAPIErrorHandling object at 0x7efc79d05990>\n\n    @pytest.mark.asyncio\n    async def test_malformed_request_data(self):\n        \"\"\"Test handling of malformed request data.\"\"\"\n        test = APITestBase()\n        await test.setup_client()\n    \n        try:\n            await test.authenticate_user(\"citizen\")\n    \n            # Test with malformed JSON\n            malformed_data = {\"title\": \"\", \"invalid_field\": \"test\"}\n            response = await test.make_request(\"POST\", \"/events\", data=malformed_data)\n    \n            assert response.status_code == 400\n            assert test.validate_error_response(response, 400)\n    \n        except Exception as e:\n>           pytest.fail(f\"Malformed data test failed: {str(e)}\")\nE           Failed: Malformed data test failed: assert 200 == 400\nE            +  where 200 = <test_events_api.APITestBase.make_request.<locals>.MockResponse object at 0x7efc79c1c290>.status_code\n\nfeatures/events-management/test_events_api.py:220: Failed"}, "teardown": {"duration": 0.0002387070000011704, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke::test_events_endpoint_accessible", "lineno": 254, "outcome": "passed", "keywords": ["test_events_endpoint_accessible", "asyncio", "smoke", "pytestmark", "TestEventsAPISmoke", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.0003628340000005892, "outcome": "passed"}, "call": {"duration": 0.00021891600000145672, "outcome": "passed"}, "teardown": {"duration": 0.00019784700000258226, "outcome": "passed"}}, {"nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke::test_authentication_works", "lineno": 271, "outcome": "passed", "keywords": ["test_authentication_works", "asyncio", "smoke", "pytestmark", "TestEventsAPISmoke", "test_events_api.py", "e2e", "api", "events", "events-management", "features", "e2e-tests", ""], "setup": {"duration": 0.00025417500000202153, "outcome": "passed"}, "call": {"duration": 0.00022216200000002573, "outcome": "passed"}, "teardown": {"duration": 0.0003148740000042949, "outcome": "passed"}}], "warnings": [{"message": "Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py", "lineno": 231}, {"message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py", "lineno": 304}, {"message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py", "lineno": 326}, {"message": "Unknown pytest.mark.e2e - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py", "lineno": 367}, {"message": "Unknown pytest.mark.pipeline - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py", "lineno": 368}, {"message": "Unknown pytest.mark.gcp - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py", "lineno": 369}, {"message": "Unknown pytest.mark.e2e - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 245}, {"message": "Unknown pytest.mark.api - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 246}, {"message": "Unknown pytest.mark.events - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 247}, {"message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 255}, {"message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html", "category": "PytestUnknownMarkWarning", "when": "collect", "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py", "lineno": 272}]}