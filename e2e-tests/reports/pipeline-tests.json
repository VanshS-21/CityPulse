{
  "created": 1752409060.8266225,
  "duration": 1.0925605297088623,
  "exitcode": 1,
  "root": "/mnt/persist/workspace/e2e-tests",
  "environment": {},
  "summary": { "passed": 7, "failed": 3, "total": 10, "collected": 20, "deselected": 10 },
  "collectors": [
    { "nodeid": "", "outcome": "passed", "result": [{ "nodeid": "features", "type": "Package" }] },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic::test_pipeline_setup",
          "type": "Coroutine",
          "lineno": 79
        },
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic::test_test_resource_creation",
          "type": "Coroutine",
          "lineno": 97
        }
      ]
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration::test_message_publishing",
          "type": "Coroutine",
          "lineno": 124
        },
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration::test_bulk_message_publishing",
          "type": "Coroutine",
          "lineno": 151
        }
      ]
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestBigQueryIntegration",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestBigQueryIntegration::test_bigquery_data_validation",
          "type": "Coroutine",
          "lineno": 189
        }
      ]
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineE2EFlow",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineE2EFlow::test_complete_pipeline_flow",
          "type": "Coroutine",
          "lineno": 229
        }
      ]
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling::test_invalid_message_handling",
          "type": "Coroutine",
          "lineno": 251
        },
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling::test_resource_cleanup",
          "type": "Coroutine",
          "lineno": 274
        }
      ]
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke::test_gcp_clients_initialization",
          "type": "Coroutine",
          "lineno": 303
        },
        {
          "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke::test_configuration_loading",
          "type": "Coroutine",
          "lineno": 325
        }
      ]
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py",
      "outcome": "passed",
      "result": [
        { "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic", "type": "Class" },
        { "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration", "type": "Class" },
        { "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestBigQueryIntegration", "type": "Class" },
        { "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineE2EFlow", "type": "Class" },
        { "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling", "type": "Class" },
        { "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke", "type": "Class" }
      ]
    },
    {
      "nodeid": "features/data-pipeline",
      "outcome": "passed",
      "result": [{ "nodeid": "features/data-pipeline/test_pipeline_e2e.py", "type": "Module" }]
    },
    {
      "nodeid": "features/events-management/test_events_api.py::TestEventsAPI",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_create_event_success",
          "type": "Coroutine",
          "lineno": 60,
          "deselected": true
        },
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_create_event_validation_error",
          "type": "Coroutine",
          "lineno": 69,
          "deselected": true
        },
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPI::test_get_events_pagination",
          "type": "Coroutine",
          "lineno": 78,
          "deselected": true
        }
      ]
    },
    {
      "nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration::test_complete_event_lifecycle",
          "type": "Coroutine",
          "lineno": 91,
          "deselected": true
        },
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration::test_event_authentication_flows",
          "type": "Coroutine",
          "lineno": 117,
          "deselected": true
        }
      ]
    },
    {
      "nodeid": "features/events-management/test_events_api.py::TestEventsAPIPerformance",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPIPerformance::test_api_response_times",
          "type": "Coroutine",
          "lineno": 152,
          "deselected": true
        }
      ]
    },
    {
      "nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling::test_invalid_event_id",
          "type": "Coroutine",
          "lineno": 181,
          "deselected": true
        },
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling::test_malformed_request_data",
          "type": "Coroutine",
          "lineno": 202,
          "deselected": true
        }
      ]
    },
    {
      "nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke::test_events_endpoint_accessible",
          "type": "Coroutine",
          "lineno": 254,
          "deselected": true
        },
        {
          "nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke::test_authentication_works",
          "type": "Coroutine",
          "lineno": 271,
          "deselected": true
        }
      ]
    },
    {
      "nodeid": "features/events-management/test_events_api.py",
      "outcome": "passed",
      "result": [
        { "nodeid": "features/events-management/test_events_api.py::TestEventsAPI", "type": "Class" },
        { "nodeid": "features/events-management/test_events_api.py::TestEventsAPIIntegration", "type": "Class" },
        { "nodeid": "features/events-management/test_events_api.py::TestEventsAPIPerformance", "type": "Class" },
        { "nodeid": "features/events-management/test_events_api.py::TestEventsAPIErrorHandling", "type": "Class" },
        { "nodeid": "features/events-management/test_events_api.py::TestEventsAPISmoke", "type": "Class" }
      ]
    },
    {
      "nodeid": "features/events-management",
      "outcome": "passed",
      "result": [{ "nodeid": "features/events-management/test_events_api.py", "type": "Module" }]
    },
    { "nodeid": "features/user-management", "outcome": "passed", "result": [] },
    {
      "nodeid": "features",
      "outcome": "passed",
      "result": [
        { "nodeid": "features/data-pipeline", "type": "Package" },
        { "nodeid": "features/events-management", "type": "Package" },
        { "nodeid": "features/user-management", "type": "Dir" }
      ]
    }
  ],
  "tests": [
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic::test_pipeline_setup",
      "lineno": 79,
      "outcome": "passed",
      "keywords": [
        "test_pipeline_setup",
        "asyncio",
        "pytestmark",
        "TestDataPipelineBasic",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.020546683000247867, "outcome": "passed" },
      "call": { "duration": 0.00032876199975362397, "outcome": "passed" },
      "teardown": { "duration": 0.00022661299999526818, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestDataPipelineBasic::test_test_resource_creation",
      "lineno": 97,
      "outcome": "passed",
      "keywords": [
        "test_test_resource_creation",
        "asyncio",
        "pytestmark",
        "TestDataPipelineBasic",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.0003951799999413197, "outcome": "passed" },
      "call": { "duration": 0.00018641799988472485, "outcome": "passed" },
      "teardown": { "duration": 0.00020051699993928196, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration::test_message_publishing",
      "lineno": 124,
      "outcome": "passed",
      "keywords": [
        "test_message_publishing",
        "asyncio",
        "pytestmark",
        "TestPubSubIntegration",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.0002443610001137131, "outcome": "passed" },
      "call": { "duration": 0.00018181600034949952, "outcome": "passed" },
      "teardown": { "duration": 0.00024583699996583164, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPubSubIntegration::test_bulk_message_publishing",
      "lineno": 151,
      "outcome": "failed",
      "keywords": [
        "test_bulk_message_publishing",
        "asyncio",
        "pytestmark",
        "TestPubSubIntegration",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.00024584299990237923, "outcome": "passed" },
      "call": {
        "duration": 0.00020499699985521147,
        "outcome": "failed",
        "crash": {
          "path": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
          "lineno": 182,
          "message": "Failed: Bulk message publishing test failed: 'trafficEvent'"
        },
        "traceback": [{ "path": "features/data-pipeline/test_pipeline_e2e.py", "lineno": 182, "message": "Failed" }],
        "longrepr": "self = <test_pipeline_e2e.TestPubSubIntegration object at 0x7ffb9bc12d90>\n\n    @pytest.mark.asyncio\n    async def test_bulk_message_publishing(self):\n        \"\"\"Test publishing multiple messages to Pub/Sub.\"\"\"\n        test = DataPipelineE2ETest()\n    \n        try:\n            await test.setup_clients()\n    \n            # Create test topic\n            topic_path = await test.create_test_topic()\n    \n            # Publish multiple test messages\n            test_events = [\n                test.test_data[\"events\"][\"validEvent\"],\n>               test.test_data[\"events\"][\"trafficEvent\"],\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                test.test_data[\"events\"][\"environmentalEvent\"]\n            ]\nE           KeyError: 'trafficEvent'\n\nfeatures/data-pipeline/test_pipeline_e2e.py:166: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_pipeline_e2e.TestPubSubIntegration object at 0x7ffb9bc12d90>\n\n    @pytest.mark.asyncio\n    async def test_bulk_message_publishing(self):\n        \"\"\"Test publishing multiple messages to Pub/Sub.\"\"\"\n        test = DataPipelineE2ETest()\n    \n        try:\n            await test.setup_clients()\n    \n            # Create test topic\n            topic_path = await test.create_test_topic()\n    \n            # Publish multiple test messages\n            test_events = [\n                test.test_data[\"events\"][\"validEvent\"],\n                test.test_data[\"events\"][\"trafficEvent\"],\n                test.test_data[\"events\"][\"environmentalEvent\"]\n            ]\n    \n            message_ids = []\n            for event in test_events:\n                message_id = await test.publish_test_message(topic_path, event)\n                message_ids.append(message_id)\n    \n            assert len(message_ids) == 3\n            assert len(test.test_messages) == 3\n    \n            # Verify all messages have unique IDs\n            assert len(set(message_ids)) == 3\n    \n        except Exception as e:\n>           pytest.fail(f\"Bulk message publishing test failed: {str(e)}\")\nE           Failed: Bulk message publishing test failed: 'trafficEvent'\n\nfeatures/data-pipeline/test_pipeline_e2e.py:182: Failed"
      },
      "teardown": { "duration": 0.0003098649999628833, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestBigQueryIntegration::test_bigquery_data_validation",
      "lineno": 189,
      "outcome": "failed",
      "keywords": [
        "test_bigquery_data_validation",
        "asyncio",
        "pytestmark",
        "TestBigQueryIntegration",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.0002512389996809361, "outcome": "passed" },
      "call": {
        "duration": 1.0017251469998882,
        "outcome": "failed",
        "crash": {
          "path": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
          "lineno": 222,
          "message": "Failed: BigQuery validation test failed: assert False is True"
        },
        "traceback": [{ "path": "features/data-pipeline/test_pipeline_e2e.py", "lineno": 222, "message": "Failed" }],
        "longrepr": "self = <test_pipeline_e2e.TestBigQueryIntegration object at 0x7ffb9bc13950>\n\n    @pytest.mark.asyncio\n    async def test_bigquery_data_validation(self):\n        \"\"\"Test BigQuery data validation functionality.\"\"\"\n        test = DataPipelineE2ETest()\n    \n        try:\n            await test.setup_clients()\n    \n            # Create test topic and publish message\n            topic_path = await test.create_test_topic()\n            test_message = test.test_data[\"events\"][\"validEvent\"]\n            await test.publish_test_message(topic_path, test_message)\n    \n            # Test data validation (with mock data since we don't have real pipeline)\n            expected_records = [test_message]\n    \n            # This would normally wait for pipeline processing\n            # For now, we'll test the validation logic itself\n            try:\n                # This will timeout since no real pipeline is running\n                # But it tests the validation framework\n                result = await asyncio.wait_for(\n                    test.validate_bigquery_data(\"events\", expected_records),\n                    timeout=5.0\n                )\n                # If we get here, validation worked (unlikely without real pipeline)\n>               assert result is True\nE               assert False is True\n\nfeatures/data-pipeline/test_pipeline_e2e.py:216: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_pipeline_e2e.TestBigQueryIntegration object at 0x7ffb9bc13950>\n\n    @pytest.mark.asyncio\n    async def test_bigquery_data_validation(self):\n        \"\"\"Test BigQuery data validation functionality.\"\"\"\n        test = DataPipelineE2ETest()\n    \n        try:\n            await test.setup_clients()\n    \n            # Create test topic and publish message\n            topic_path = await test.create_test_topic()\n            test_message = test.test_data[\"events\"][\"validEvent\"]\n            await test.publish_test_message(topic_path, test_message)\n    \n            # Test data validation (with mock data since we don't have real pipeline)\n            expected_records = [test_message]\n    \n            # This would normally wait for pipeline processing\n            # For now, we'll test the validation logic itself\n            try:\n                # This will timeout since no real pipeline is running\n                # But it tests the validation framework\n                result = await asyncio.wait_for(\n                    test.validate_bigquery_data(\"events\", expected_records),\n                    timeout=5.0\n                )\n                # If we get here, validation worked (unlikely without real pipeline)\n                assert result is True\n            except asyncio.TimeoutError:\n                # Expected - no real pipeline running\n                pass\n    \n        except Exception as e:\n>           pytest.fail(f\"BigQuery validation test failed: {str(e)}\")\nE           Failed: BigQuery validation test failed: assert False is True\n\nfeatures/data-pipeline/test_pipeline_e2e.py:222: Failed"
      },
      "teardown": { "duration": 0.0003069489998779318, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineE2EFlow::test_complete_pipeline_flow",
      "lineno": 229,
      "outcome": "passed",
      "keywords": [
        "test_complete_pipeline_flow",
        "slow",
        "asyncio",
        "pytestmark",
        "TestPipelineE2EFlow",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.00031394299958265037, "outcome": "passed" },
      "call": { "duration": 0.0002221750000899192, "outcome": "passed" },
      "teardown": { "duration": 0.00017329299998891656, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling::test_invalid_message_handling",
      "lineno": 251,
      "outcome": "passed",
      "keywords": [
        "test_invalid_message_handling",
        "asyncio",
        "pytestmark",
        "TestPipelineErrorHandling",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.00030977400001575006, "outcome": "passed" },
      "call": { "duration": 0.00016631000016786857, "outcome": "passed" },
      "teardown": { "duration": 0.00016086099958556588, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineErrorHandling::test_resource_cleanup",
      "lineno": 274,
      "outcome": "passed",
      "keywords": [
        "test_resource_cleanup",
        "asyncio",
        "pytestmark",
        "TestPipelineErrorHandling",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.00024088200007099658, "outcome": "passed" },
      "call": { "duration": 0.00016132599967022543, "outcome": "passed" },
      "teardown": { "duration": 0.00017872099988380796, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke::test_gcp_clients_initialization",
      "lineno": 303,
      "outcome": "passed",
      "keywords": [
        "test_gcp_clients_initialization",
        "asyncio",
        "smoke",
        "pytestmark",
        "TestPipelineSmoke",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.0002063580000140064, "outcome": "passed" },
      "call": { "duration": 0.00014435699995374307, "outcome": "passed" },
      "teardown": { "duration": 0.0002508359998500964, "outcome": "passed" }
    },
    {
      "nodeid": "features/data-pipeline/test_pipeline_e2e.py::TestPipelineSmoke::test_configuration_loading",
      "lineno": 325,
      "outcome": "failed",
      "keywords": [
        "test_configuration_loading",
        "asyncio",
        "smoke",
        "pytestmark",
        "TestPipelineSmoke",
        "test_pipeline_e2e.py",
        "e2e",
        "pipeline",
        "gcp",
        "data-pipeline",
        "features",
        "e2e-tests",
        ""
      ],
      "setup": { "duration": 0.00021259899995129672, "outcome": "passed" },
      "call": {
        "duration": 0.0002468520001457364,
        "outcome": "failed",
        "crash": {
          "path": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
          "lineno": 343,
          "message": "Failed: Configuration loading smoke test failed: assert 'database' in {'gcp': {'projectId': 'test-project'}}\n +  where {'gcp': {'projectId': 'test-project'}} = <test_pipeline_e2e.DataPipelineE2ETest object at 0x7ffb9bb1af10>.config"
        },
        "traceback": [{ "path": "features/data-pipeline/test_pipeline_e2e.py", "lineno": 343, "message": "Failed" }],
        "longrepr": "self = <test_pipeline_e2e.TestPipelineSmoke object at 0x7ffb9bc25a10>\n\n    @pytest.mark.smoke\n    @pytest.mark.asyncio\n    async def test_configuration_loading(self):\n        \"\"\"Smoke test: Configuration can be loaded.\"\"\"\n        test = DataPipelineE2ETest()\n    \n        try:\n            # Test configuration loading\n            assert test.config is not None\n            assert \"gcp\" in test.config\n>           assert \"database\" in test.config\nE           AssertionError: assert 'database' in {'gcp': {'projectId': 'test-project'}}\nE            +  where {'gcp': {'projectId': 'test-project'}} = <test_pipeline_e2e.DataPipelineE2ETest object at 0x7ffb9bb1af10>.config\n\nfeatures/data-pipeline/test_pipeline_e2e.py:336: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_pipeline_e2e.TestPipelineSmoke object at 0x7ffb9bc25a10>\n\n    @pytest.mark.smoke\n    @pytest.mark.asyncio\n    async def test_configuration_loading(self):\n        \"\"\"Smoke test: Configuration can be loaded.\"\"\"\n        test = DataPipelineE2ETest()\n    \n        try:\n            # Test configuration loading\n            assert test.config is not None\n            assert \"gcp\" in test.config\n            assert \"database\" in test.config\n    \n            # Test data loading\n            assert test.test_data is not None\n            assert \"events\" in test.test_data\n    \n        except Exception as e:\n>           pytest.fail(f\"Configuration loading smoke test failed: {str(e)}\")\nE           Failed: Configuration loading smoke test failed: assert 'database' in {'gcp': {'projectId': 'test-project'}}\nE            +  where {'gcp': {'projectId': 'test-project'}} = <test_pipeline_e2e.DataPipelineE2ETest object at 0x7ffb9bb1af10>.config\n\nfeatures/data-pipeline/test_pipeline_e2e.py:343: Failed"
      },
      "teardown": { "duration": 0.00029972799984534504, "outcome": "passed" }
    }
  ],
  "warnings": [
    {
      "message": "Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
      "lineno": 231
    },
    {
      "message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
      "lineno": 304
    },
    {
      "message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
      "lineno": 326
    },
    {
      "message": "Unknown pytest.mark.e2e - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
      "lineno": 367
    },
    {
      "message": "Unknown pytest.mark.pipeline - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
      "lineno": 368
    },
    {
      "message": "Unknown pytest.mark.gcp - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/data-pipeline/test_pipeline_e2e.py",
      "lineno": 369
    },
    {
      "message": "Unknown pytest.mark.e2e - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py",
      "lineno": 245
    },
    {
      "message": "Unknown pytest.mark.api - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py",
      "lineno": 246
    },
    {
      "message": "Unknown pytest.mark.events - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py",
      "lineno": 247
    },
    {
      "message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py",
      "lineno": 255
    },
    {
      "message": "Unknown pytest.mark.smoke - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html",
      "category": "PytestUnknownMarkWarning",
      "when": "collect",
      "filename": "/mnt/persist/workspace/e2e-tests/features/events-management/test_events_api.py",
      "lineno": 272
    }
  ]
}
